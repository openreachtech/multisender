{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "name": "BASE_ERC20_TRANSFER_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_ERC721_TRANSFER_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_GAS_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tos",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "baseGas_",
          "type": "uint256"
        }
      ],
      "name": "multisendERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tos",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "baseGas_",
          "type": "uint256"
        }
      ],
      "name": "multisendERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8e31f575f414f393e7181e51697f81c4b0770ed4a3e223ca3300d703981169ed",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "979568",
    "logsBloom": "0x
    "blockHash": "0x4549078d9c689cfab21ea2f4955d5b41c0ee81639e412050eb51a8b7f4632bf3",
    "transactionHash": "0x8e31f575f414f393e7181e51697f81c4b0770ed4a3e223ca3300d703981169ed",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "979568",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "15b64be301faa0ba6c6f3e4d8cd597a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BASE_ERC20_TRANSFER_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_ERC721_TRANSFER_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GAS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"baseGas_\",\"type\":\"uint256\"}],\"name\":\"multisendERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"baseGas_\",\"type\":\"uint256\"}],\"name\":\"multisendERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Send ERC20/ERC721 to multiple account at once Features:  No transaction fees  Protection against gas griefing  User-friendly error messages: Lists each address if transfer fails  Audited using the reputable tool(=`slither`)\",\"kind\":\"dev\",\"methods\":{\"multisendERC20(address,address[],uint256[],uint256)\":{\"details\":\"Transfer erc20 to multiple receipients Revert if the transferring operation consume `MAX_GAS_MULTIPLIER` times larger gas then standard\",\"params\":{\"amounts\":\"list of amounts\",\"baseGas_\":\"the basic gas consumption of transferring operation\",\"token\":\"address of token\",\"tos\":\"list of receipient addresses\"}},\"multisendERC721(address,address[],uint256[],bytes[],uint256)\":{\"details\":\"Transfer erc721 to multiple receipients Revert if the transferring operation consume `MAX_GAS_MULTIPLIER` times larger gas then standard\",\"params\":{\"baseGas_\":\"the basic gas consumption of transferring operation\",\"data\":\"list of data\",\"token\":\"address of token\",\"tokenIds\":\"list of tokenIds\",\"tos\":\"list of receipient addresses\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Multisender.sol\":\"Multisender\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Multisender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @dev Send ERC20/ERC721 to multiple account at once\\n *\\n * Features:\\n *  No transaction fees\\n *  Protection against gas griefing\\n *  User-friendly error messages: Lists each address if transfer fails\\n *  Audited using the reputable tool(=`slither`)\\n *\\n */\\ncontract Multisender {\\n    using Strings for uint256;\\n    using Strings for address;\\n\\n    // Default gas consumption when utilizing Openzeppelin mesured by `GasMeter.sol`\\n    uint256 public constant BASE_ERC20_TRANSFER_GAS = 28384;\\n    uint256 public constant BASE_ERC721_TRANSFER_GAS = 37573;\\n\\n    // The multiplier to calculate max consumable gas\\n    uint256 public constant MAX_GAS_MULTIPLIER = 3;\\n\\n    /**\\n     * @dev Transfer erc20 to multiple receipients\\n     * Revert if the transferring operation consume `MAX_GAS_MULTIPLIER` times larger gas then standard\\n     *\\n     * @param token address of token\\n     * @param tos list of receipient addresses\\n     * @param amounts list of amounts\\n     * @param baseGas_ the basic gas consumption of transferring operation\\n     */\\n    function multisendERC20(\\n        address token,\\n        address[] calldata tos,\\n        uint256[] calldata amounts,\\n        uint256 baseGas_\\n    ) public {\\n        require(token != address(0), \\\"token address cannot be 0\\\");\\n        require(tos.length == amounts.length, \\\"tos and amounts must have the same length\\\");\\n\\n        uint256 baseGas = baseGas_ != 0 ? baseGas_ : BASE_ERC20_TRANSFER_GAS;\\n\\n        string memory failedList = \\\"\\\";\\n        uint256 total = tos.length;\\n        for (uint256 i = 0; i < tos.length; i++) {\\n            _validateLeftgas(i, total, baseGas * MAX_GAS_MULTIPLIER);\\n            if (!_transferERC20(token, tos[i], amounts[i], baseGas)) {\\n                failedList = string.concat(failedList, tos[i].toHexString(), \\\",\\\");\\n            }\\n        }\\n\\n        _assertFailedList(failedList);\\n    }\\n\\n    /**\\n     * @dev Transfer erc721 to multiple receipients\\n     * Revert if the transferring operation consume `MAX_GAS_MULTIPLIER` times larger gas then standard\\n     *\\n     * @param token address of token\\n     * @param tos list of receipient addresses\\n     * @param tokenIds list of tokenIds\\n     * @param data list of data\\n     * @param baseGas_ the basic gas consumption of transferring operation\\n     */\\n    function multisendERC721(\\n        address token,\\n        address[] calldata tos,\\n        uint256[] calldata tokenIds,\\n        bytes[] calldata data,\\n        uint256 baseGas_\\n    ) public {\\n        require(token != address(0), \\\"token address cannot be 0\\\");\\n        require(tos.length == tokenIds.length, \\\"tos and tokenIds must have the same length\\\");\\n        require(tos.length == data.length, \\\"tos and data must have the same length\\\");\\n\\n        uint256 baseGas = baseGas_ != 0 ? baseGas_ : BASE_ERC721_TRANSFER_GAS;\\n\\n        string memory failedList = \\\"\\\";\\n        uint256 total = tos.length;\\n        for (uint256 i = 0; i < tos.length; i++) {\\n            _validateLeftgas(i, total, baseGas * MAX_GAS_MULTIPLIER);\\n            if (!_safeTransferERC721(token, tos[i], tokenIds[i], data[i], baseGas)) {\\n                failedList = string.concat(failedList, tos[i].toHexString(), \\\",\\\");\\n            }\\n        }\\n\\n        _assertFailedList(failedList);\\n    }\\n\\n    function _validateLeftgas(uint256 i, uint256 total, uint256 requiredGas) internal view {\\n        if (gasleft() < requiredGas) {\\n            revert(\\n                string.concat(\\n                    \\\"will run out of gas at index \\\",\\n                    (i + 1).toString(),\\n                    \\\" in \\\",\\n                    total.toString(),\\n                    \\\", left: \\\",\\n                    gasleft().toString(),\\n                    \\\" required: \\\",\\n                    requiredGas.toString()\\n                )\\n            );\\n        }\\n    }\\n\\n    function _assertFailedList(string memory failedList) internal pure {\\n        bytes32 length;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            length := mload(failedList)\\n        }\\n\\n        if (uint256(length) > 0) {\\n            revert(\\n                string.concat(\\n                    \\\"failed to transfer to \\\",\\n                    // NOTE: 43 length = address + \\\",\\\"\\n                    (uint256(length) / 43).toString(),\\n                    \\\" addresses: \\\",\\n                    failedList\\n                )\\n            );\\n        }\\n    }\\n\\n    function _transferERC20(\\n        address token,\\n        address to,\\n        uint256 amount,\\n        uint256 baseGas\\n    ) internal returns (bool) {\\n        // NOTE: call transferFrom with gas limit to avoid gas greefing\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory data) = token.call{gas: baseGas * MAX_GAS_MULTIPLIER}(\\n            abi.encodeWithSignature(\\n                \\\"transferFrom(address,address,uint256)\\\",\\n                msg.sender,\\n                to,\\n                amount\\n            )\\n        );\\n        return success && abi.decode(data, (bool));\\n    }\\n\\n    function _safeTransferERC721(\\n        address token,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data,\\n        uint256 baseGas\\n    ) internal returns (bool) {\\n        // NOTE: call transferFrom with gas limit to avoid gas greefing\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = token.call{gas: baseGas * MAX_GAS_MULTIPLIER}(\\n            abi.encodeWithSignature(\\n                \\\"safeTransferFrom(address,address,uint256,bytes)\\\",\\n                msg.sender,\\n                to,\\n                tokenId,\\n                data\\n            )\\n        );\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x23e47d031af8b319195425a8470e10eecdc4cda9cf91ad49c7e45478c4fad8a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506110d6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063cc75ee3511610050578063cc75ee351461009c578063d9bd4c68146100a4578063f68634c2146100b757600080fd5b80639c0899eb1461006c578063b1e242e814610087575b600080fd5b610075616ee081565b60405190815260200160405180910390f35b61009a610095366004610b81565b6100c0565b005b610075600381565b61009a6100b2366004610c0a565b6102a9565b6100756192c581565b6001600160a01b03861661011b5760405162461bcd60e51b815260206004820152601960248201527f746f6b656e20616464726573732063616e6e6f7420626520300000000000000060448201526064015b60405180910390fd5b8382146101905760405162461bcd60e51b815260206004820152602960248201527f746f7320616e6420616d6f756e7473206d75737420686176652074686520736160448201527f6d65206c656e67746800000000000000000000000000000000000000000000006064820152608401610112565b6000816000036101a257616ee06101a4565b815b604080516020810190915260008082529192509086905b87811015610294576101d881836101d3600388610cd2565b610500565b6102228a8a8a848181106101ee576101ee610ce9565b90506020020160208101906102039190610cff565b89898581811061021557610215610ce9565b9050602002013587610574565b610282578261025f8a8a8481811061023c5761023c610ce9565b90506020020160208101906102519190610cff565b6001600160a01b0316610681565b604051602001610270929190610d3e565b60405160208183030381529060405292505b8061028c81610d95565b9150506101bb565b5061029e8261069d565b505050505050505050565b6001600160a01b0388166102ff5760405162461bcd60e51b815260206004820152601960248201527f746f6b656e20616464726573732063616e6e6f742062652030000000000000006044820152606401610112565b8584146103745760405162461bcd60e51b815260206004820152602a60248201527f746f7320616e6420746f6b656e496473206d757374206861766520746865207360448201527f616d65206c656e677468000000000000000000000000000000000000000000006064820152608401610112565b8582146103e95760405162461bcd60e51b815260206004820152602660248201527f746f7320616e642064617461206d7573742068617665207468652073616d652060448201527f6c656e67746800000000000000000000000000000000000000000000000000006064820152608401610112565b6000816000036103fb576192c56103fd565b815b604080516020810190915260008082529192509088905b898110156104e95761042c81836101d3600388610cd2565b61049a8c8c8c8481811061044257610442610ce9565b90506020020160208101906104579190610cff565b8b8b8581811061046957610469610ce9565b905060200201358a8a8681811061048257610482610ce9565b90506020028101906104949190610dae565b896106c9565b6104d757826104b48c8c8481811061023c5761023c610ce9565b6040516020016104c5929190610d3e565b60405160208183030381529060405292505b806104e181610d95565b915050610414565b506104f38261069d565b5050505050505050505050565b805a101561056f5761051b610516846001610df5565b6107af565b610524836107af565b61052d5a6107af565b610536846107af565b6040516020016105499493929190610e08565b60408051601f198184030181529082905262461bcd60e51b825261011291600401610f0b565b505050565b600080806001600160a01b03871661058d600386610cd2565b6040513360248201526001600160a01b03891660448201526064810188905260840160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052516106129190610f3e565b60006040518083038160008787f1925050503d8060008114610650576040519150601f19603f3d011682016040523d82523d6000602084013e610655565b606091505b50915091508180156106765750808060200190518101906106769190610f5a565b979650505050505050565b60606106976001600160a01b038316601461084f565b92915050565b805180156106c5576106b3610516602b83610f7c565b82604051602001610549929190610f9e565b5050565b6000806001600160a01b0388166106e1600385610cd2565b33898989896040516024016106fa95949392919061101f565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb88d4fde000000000000000000000000000000000000000000000000000000001790525161075d9190610f3e565b60006040518083038160008787f1925050503d806000811461079b576040519150601f19603f3d011682016040523d82523d6000602084013e6107a0565b606091505b50909998505050505050505050565b606060006107bc83610a37565b600101905060008167ffffffffffffffff8111156107dc576107dc611073565b6040519080825280601f01601f191660200182016040528015610806576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461081057509392505050565b6060600061085e836002610cd2565b610869906002610df5565b67ffffffffffffffff81111561088157610881611073565b6040519080825280601f01601f1916602001820160405280156108ab576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106108e2576108e2610ce9565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061092d5761092d610ce9565b60200101906001600160f81b031916908160001a9053506000610951846002610cd2565b61095c906001610df5565b90505b60018111156109e1577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061099d5761099d610ce9565b1a60f81b8282815181106109b3576109b3610ce9565b60200101906001600160f81b031916908160001a90535060049490941c936109da81611089565b905061095f565b508315610a305760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610112565b9392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610a80577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610aac576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610aca57662386f26fc10000830492506010015b6305f5e1008310610ae2576305f5e100830492506008015b6127108310610af657612710830492506004015b60648310610b08576064830492506002015b600a83106106975760010192915050565b80356001600160a01b0381168114610b3057600080fd5b919050565b60008083601f840112610b4757600080fd5b50813567ffffffffffffffff811115610b5f57600080fd5b6020830191508360208260051b8501011115610b7a57600080fd5b9250929050565b60008060008060008060808789031215610b9a57600080fd5b610ba387610b19565b9550602087013567ffffffffffffffff80821115610bc057600080fd5b610bcc8a838b01610b35565b90975095506040890135915080821115610be557600080fd5b50610bf289828a01610b35565b979a9699509497949695606090950135949350505050565b60008060008060008060008060a0898b031215610c2657600080fd5b610c2f89610b19565b9750602089013567ffffffffffffffff80821115610c4c57600080fd5b610c588c838d01610b35565b909950975060408b0135915080821115610c7157600080fd5b610c7d8c838d01610b35565b909750955060608b0135915080821115610c9657600080fd5b50610ca38b828c01610b35565b999c989b50969995989497949560800135949350505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761069757610697610cbc565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610d1157600080fd5b610a3082610b19565b60005b83811015610d35578181015183820152602001610d1d565b50506000910152565b60008351610d50818460208801610d1a565b835190830190610d64818360208801610d1a565b7f2c000000000000000000000000000000000000000000000000000000000000009101908152600101949350505050565b600060018201610da757610da7610cbc565b5060010190565b6000808335601e19843603018112610dc557600080fd5b83018035915067ffffffffffffffff821115610de057600080fd5b602001915036819003821315610b7a57600080fd5b8082018082111561069757610697610cbc565b7f77696c6c2072756e206f7574206f662067617320617420696e64657820000000815260008551610e4081601d850160208a01610d1a565b7f20696e2000000000000000000000000000000000000000000000000000000000601d918401918201528551610e7d816021840160208a01610d1a565b7f2c206c6566743a20000000000000000000000000000000000000000000000000602192909101918201528451610ebb816029840160208901610d1a565b601d818301019150507f2072657175697265643a20000000000000000000000000000000000000000000600c8201528351610efd816017840160208801610d1a565b016017019695505050505050565b6020815260008251806020840152610f2a816040850160208701610d1a565b601f01601f19169190910160400192915050565b60008251610f50818460208701610d1a565b9190910192915050565b600060208284031215610f6c57600080fd5b81518015158114610a3057600080fd5b600082610f9957634e487b7160e01b600052601260045260246000fd5b500490565b7f6661696c656420746f207472616e7366657220746f2000000000000000000000815260008351610fd6816016850160208801610d1a565b7f206164647265737365733a2000000000000000000000000000000000000000006016918401918201528351611013816022840160208801610d1a565b01602201949350505050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b634e487b7160e01b600052604160045260246000fd5b60008161109857611098610cbc565b50600019019056fea2646970667358221220cca06b220c51549cb115de1b1957e1886d580f38d083e4caab94bb25f10cc4c764736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063cc75ee3511610050578063cc75ee351461009c578063d9bd4c68146100a4578063f68634c2146100b757600080fd5b80639c0899eb1461006c578063b1e242e814610087575b600080fd5b610075616ee081565b60405190815260200160405180910390f35b61009a610095366004610b81565b6100c0565b005b610075600381565b61009a6100b2366004610c0a565b6102a9565b6100756192c581565b6001600160a01b03861661011b5760405162461bcd60e51b815260206004820152601960248201527f746f6b656e20616464726573732063616e6e6f7420626520300000000000000060448201526064015b60405180910390fd5b8382146101905760405162461bcd60e51b815260206004820152602960248201527f746f7320616e6420616d6f756e7473206d75737420686176652074686520736160448201527f6d65206c656e67746800000000000000000000000000000000000000000000006064820152608401610112565b6000816000036101a257616ee06101a4565b815b604080516020810190915260008082529192509086905b87811015610294576101d881836101d3600388610cd2565b610500565b6102228a8a8a848181106101ee576101ee610ce9565b90506020020160208101906102039190610cff565b89898581811061021557610215610ce9565b9050602002013587610574565b610282578261025f8a8a8481811061023c5761023c610ce9565b90506020020160208101906102519190610cff565b6001600160a01b0316610681565b604051602001610270929190610d3e565b60405160208183030381529060405292505b8061028c81610d95565b9150506101bb565b5061029e8261069d565b505050505050505050565b6001600160a01b0388166102ff5760405162461bcd60e51b815260206004820152601960248201527f746f6b656e20616464726573732063616e6e6f742062652030000000000000006044820152606401610112565b8584146103745760405162461bcd60e51b815260206004820152602a60248201527f746f7320616e6420746f6b656e496473206d757374206861766520746865207360448201527f616d65206c656e677468000000000000000000000000000000000000000000006064820152608401610112565b8582146103e95760405162461bcd60e51b815260206004820152602660248201527f746f7320616e642064617461206d7573742068617665207468652073616d652060448201527f6c656e67746800000000000000000000000000000000000000000000000000006064820152608401610112565b6000816000036103fb576192c56103fd565b815b604080516020810190915260008082529192509088905b898110156104e95761042c81836101d3600388610cd2565b61049a8c8c8c8481811061044257610442610ce9565b90506020020160208101906104579190610cff565b8b8b8581811061046957610469610ce9565b905060200201358a8a8681811061048257610482610ce9565b90506020028101906104949190610dae565b896106c9565b6104d757826104b48c8c8481811061023c5761023c610ce9565b6040516020016104c5929190610d3e565b60405160208183030381529060405292505b806104e181610d95565b915050610414565b506104f38261069d565b5050505050505050505050565b805a101561056f5761051b610516846001610df5565b6107af565b610524836107af565b61052d5a6107af565b610536846107af565b6040516020016105499493929190610e08565b60408051601f198184030181529082905262461bcd60e51b825261011291600401610f0b565b505050565b600080806001600160a01b03871661058d600386610cd2565b6040513360248201526001600160a01b03891660448201526064810188905260840160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052516106129190610f3e565b60006040518083038160008787f1925050503d8060008114610650576040519150601f19603f3d011682016040523d82523d6000602084013e610655565b606091505b50915091508180156106765750808060200190518101906106769190610f5a565b979650505050505050565b60606106976001600160a01b038316601461084f565b92915050565b805180156106c5576106b3610516602b83610f7c565b82604051602001610549929190610f9e565b5050565b6000806001600160a01b0388166106e1600385610cd2565b33898989896040516024016106fa95949392919061101f565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb88d4fde000000000000000000000000000000000000000000000000000000001790525161075d9190610f3e565b60006040518083038160008787f1925050503d806000811461079b576040519150601f19603f3d011682016040523d82523d6000602084013e6107a0565b606091505b50909998505050505050505050565b606060006107bc83610a37565b600101905060008167ffffffffffffffff8111156107dc576107dc611073565b6040519080825280601f01601f191660200182016040528015610806576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461081057509392505050565b6060600061085e836002610cd2565b610869906002610df5565b67ffffffffffffffff81111561088157610881611073565b6040519080825280601f01601f1916602001820160405280156108ab576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106108e2576108e2610ce9565b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061092d5761092d610ce9565b60200101906001600160f81b031916908160001a9053506000610951846002610cd2565b61095c906001610df5565b90505b60018111156109e1577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061099d5761099d610ce9565b1a60f81b8282815181106109b3576109b3610ce9565b60200101906001600160f81b031916908160001a90535060049490941c936109da81611089565b905061095f565b508315610a305760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610112565b9392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610a80577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610aac576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610aca57662386f26fc10000830492506010015b6305f5e1008310610ae2576305f5e100830492506008015b6127108310610af657612710830492506004015b60648310610b08576064830492506002015b600a83106106975760010192915050565b80356001600160a01b0381168114610b3057600080fd5b919050565b60008083601f840112610b4757600080fd5b50813567ffffffffffffffff811115610b5f57600080fd5b6020830191508360208260051b8501011115610b7a57600080fd5b9250929050565b60008060008060008060808789031215610b9a57600080fd5b610ba387610b19565b9550602087013567ffffffffffffffff80821115610bc057600080fd5b610bcc8a838b01610b35565b90975095506040890135915080821115610be557600080fd5b50610bf289828a01610b35565b979a9699509497949695606090950135949350505050565b60008060008060008060008060a0898b031215610c2657600080fd5b610c2f89610b19565b9750602089013567ffffffffffffffff80821115610c4c57600080fd5b610c588c838d01610b35565b909950975060408b0135915080821115610c7157600080fd5b610c7d8c838d01610b35565b909750955060608b0135915080821115610c9657600080fd5b50610ca38b828c01610b35565b999c989b50969995989497949560800135949350505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761069757610697610cbc565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610d1157600080fd5b610a3082610b19565b60005b83811015610d35578181015183820152602001610d1d565b50506000910152565b60008351610d50818460208801610d1a565b835190830190610d64818360208801610d1a565b7f2c000000000000000000000000000000000000000000000000000000000000009101908152600101949350505050565b600060018201610da757610da7610cbc565b5060010190565b6000808335601e19843603018112610dc557600080fd5b83018035915067ffffffffffffffff821115610de057600080fd5b602001915036819003821315610b7a57600080fd5b8082018082111561069757610697610cbc565b7f77696c6c2072756e206f7574206f662067617320617420696e64657820000000815260008551610e4081601d850160208a01610d1a565b7f20696e2000000000000000000000000000000000000000000000000000000000601d918401918201528551610e7d816021840160208a01610d1a565b7f2c206c6566743a20000000000000000000000000000000000000000000000000602192909101918201528451610ebb816029840160208901610d1a565b601d818301019150507f2072657175697265643a20000000000000000000000000000000000000000000600c8201528351610efd816017840160208801610d1a565b016017019695505050505050565b6020815260008251806020840152610f2a816040850160208701610d1a565b601f01601f19169190910160400192915050565b60008251610f50818460208701610d1a565b9190910192915050565b600060208284031215610f6c57600080fd5b81518015158114610a3057600080fd5b600082610f9957634e487b7160e01b600052601260045260246000fd5b500490565b7f6661696c656420746f207472616e7366657220746f2000000000000000000000815260008351610fd6816016850160208801610d1a565b7f206164647265737365733a2000000000000000000000000000000000000000006016918401918201528351611013816022840160208801610d1a565b01602201949350505050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b634e487b7160e01b600052604160045260246000fd5b60008161109857611098610cbc565b50600019019056fea2646970667358221220cca06b220c51549cb115de1b1957e1886d580f38d083e4caab94bb25f10cc4c764736f6c63430008130033",
  "devdoc": {
    "details": "Send ERC20/ERC721 to multiple account at once Features:  No transaction fees  Protection against gas griefing  User-friendly error messages: Lists each address if transfer fails  Audited using the reputable tool(=`slither`)",
    "kind": "dev",
    "methods": {
      "multisendERC20(address,address[],uint256[],uint256)": {
        "details": "Transfer erc20 to multiple receipients Revert if the transferring operation consume `MAX_GAS_MULTIPLIER` times larger gas then standard",
        "params": {
          "amounts": "list of amounts",
          "baseGas_": "the basic gas consumption of transferring operation",
          "token": "address of token",
          "tos": "list of receipient addresses"
        }
      },
      "multisendERC721(address,address[],uint256[],bytes[],uint256)": {
        "details": "Transfer erc721 to multiple receipients Revert if the transferring operation consume `MAX_GAS_MULTIPLIER` times larger gas then standard",
        "params": {
          "baseGas_": "the basic gas consumption of transferring operation",
          "data": "list of data",
          "token": "address of token",
          "tokenIds": "list of tokenIds",
          "tos": "list of receipient addresses"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}